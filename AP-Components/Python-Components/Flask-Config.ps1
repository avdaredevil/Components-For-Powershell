<#
|===============================================================>|
   Flask Config by APoorv Verma [AP] on 2/12/2014
|===============================================================>|
      $) Configures Flask in a Designated Folder
      $) Makes Common Web-Dev Folders
      $) Makes a template Website.py file for Automatic Launch
      $) Checks For Dependencies
      $) Verfication for 0 Parameter Run
      $) Sets The virtual Environment with Common Packages
      $) Configures Flask Environment in Basic, Interm, and Adv.
      $) Runs Flask Dev Tools for Powershell by Apoorv Verma [AP]
|===============================================================>|
#>
param(
    [ValidatePattern("..*")][String]$Folder = "|******|",
    [ValidatePattern("..*")][Alias("Index")][String]$IndexFile="Website.py",
    [Switch]$Silent,
    [Switch]$Force,
    [ValidateSet("Basic","Intermediate","Advanced")][String]$Form = "Basic"
)
# =======================================START=OF=COMPILER==========================================================|
#    The Following Code was added by AP-Compiler 1.6 (APC: 1.2) To Make this program independent of AP-Core Engine
#    GitHub: https://github.com/avdaredevil/AP-Compiler
# ==================================================================================================================|
$Script:PSHell=$(if($PSHell){$PSHell}elseif($PSScriptRoot){$PSScriptRoot}else{"."});
$Script:AP_Console = @{version=[version]'1.2'; isShim = $true}
function B64 {param([Parameter(ValueFromPipeline=$true)][String]$Text, [ValidateSet("UTF8","Unicode")][String]$Encoding = "UTF8")     [System.Text.Encoding]::$Encoding.GetString([System.Convert]::FromBase64String($Text))}
# This syntax is to prevent AV's from misclassifying this as anything but innocuous
& (Get-Alias iex) (B64 "")
# ========================================END=OF=COMPILER===========================================================|

# ------------------------------------------------------------
if ($Folder -eq "|******|") {
    $FG = [Console]::ForegroundColor
    [Console]::ForegroundColor = "yellow"
    $IP = Input-Prompt "Do you want to configure Flask in current Folder [yes/no] : "
    [Console]::ForegroundColor = $FG
    rv fg
    if ($IP[0] -ne "y") {Write-AP "!Please call the command 'Flask-Config <Path to configure flask>'";exit}
    $Folder = $PWD
}
# ------------------------------------------------------------
Write-AP "*Configuring Flask in [$Form] Mode"
if ($Force) {Write-AP "!In Force\OverWrite Mode"}
# ------------------------------------------------------------
if (!(test-path $Folder -type container)) {
    if ($Force) {
        try {md $Folder | Out-Null} catch {Write-AP "-Invalid Folder Name";exit}
    } else {
        Write-AP "-Folder does not exist!";exit
    }
}
try {Virtualenv | out-null} catch {Write-AP "-Python VirtualEnv is not installed or isn't in Path, Please FIX!";exit}
# ------------------------------------------------------------
$OldPath = $PWD
cd $Folder
# ---------------
if (!$Silent) {Write-AP "*Reading config state of folder"}
try {$VFld = "$(Resolve-Path (Get-ChildItem -Directory | ? {"$((Get-ChildItem -Directory $_).name)" -eq "Include Lib Scripts"})[0])"} catch {}
# ---------------
if (!$Silent) {Write-AP "*Intializing Virtual Environment"}
try {& "$VFld\Scripts\activate.ps1"} catch {
    try {
        del $FLVD
        Write-AP "-V-ENV in [$(Split-Path $VFLD -leaf)] is Mal-Configured! Rebuilding."
        $VFLD = ""
    } catch {}
}
# ---------------
if ($VFld -notmatch "..*") {
    $VFld = "$PWD\FLASK"
    if (!$Silent) {Write-AP ">*Configuring V-Env in [$(Split-Path $VFLD -leaf)]"}
    $dmp = Virtualenv $VFLD
    $Dmp | % {write-host -f 3 "        $_"}
    & "$VFld\Scripts\activate.ps1"
    $Script:NewInst = $True
} else {
    if (!$Silent) {Write-AP ">*Configuring V-Env in [$(Split-Path $VFLD -leaf)]"}
}
# ---------------
if (!$Silent) {Write-AP "*Building Folder Structure"}
"templates","static","static/css" | ? {!(test-path -type container $PWD\$_)} | % {md $_ | Out-Null}
# ---------------
$IndexCode = @"
#!flask/bin/python
from flask import Flask

app = Flask(__name__)

@app.route('/')
@app.route('/index')
def index():
    return """
        <div align='center'>
            <b><u><i>This is a Site Template Created on Flask-Config by <a href='http://www.linkedin.com/in/ApoorvVerma'>Apoorv Verma [AP]</a></i></u></b>
        </div>
    """

if __name__ == "__main__":
    app.run(debug=True)
"@
# ---------------
if (!(Test-Path $IndexFile -Type Leaf)) {
    if (!$Silent) {Write-AP "*Writing Template to [$IndexFile]"}
    $IndexCode | Out-File -Encoding default $IndexFile
} else {
    if (!$Silent) {Write-AP "*Index File [$IndexFile] exists, skipping."}
}
# ---------------
Write-AP "*Linkaging Package To Functions [Ease of Use]!"
Flask-DevTools $IndexFile -Silent:$Silent
# ------------------------------------------------------------
if ($NewInst -or $Force) {
    if (!$Silent) {Write-AP "*Installing Basic Packages"}
#    "lamson chardet flask-mail","sqlalchemy==0.7.9","flask-sqlalchemy==0.16","sqlalchemy-migrate==0.7.2","flask-whooshalchemy==0.54a","flask-wtf==0.8.4","pytz==2013b","flask-babel==0.8",
    "flask","flask-login","flask-openid","flup" | % {Flask-AddPackage -Silent -ShowFinal $_ -Tab 1}
}
# ---------------
if (!$Silent) {Write-AP "*De-Activating V-Env. To Re-Activate use '$(Split-Path $VFld -leaf)\Scripts\activate'"}
try {gcm deactivate -ErrorAction Stop | Out-Null;deactivate} catch {Write-AP "!Function [Deactivate] should have existed! VirtualEnv Was not configured!"}
# ---------------
Write-AP "+Completed Configuring Flask in [$(Split-Path $PWD -leaf)]"
# ------------------------------------------------------------
cd $OLDPath;rv oldpath

