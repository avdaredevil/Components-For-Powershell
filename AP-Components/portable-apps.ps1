
# =======================================START=OF=COMPILER==========================================================|
#    The Following Code was added by AP-Compiler Version [1.3] To Make this program independent of AP-Core Engine
#    GitHub: https://github.com/avdaredevil/AP-Compiler
# ==================================================================================================================|
$Script:PSHell=$(if($PSHell){$PSHell}elseif($PSScriptRoot){$PSScriptRoot}else{"."});
iex ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("")))
# ========================================END=OF=COMPILER===========================================================|
$Apps = (ls "D:\AP\PortableApps\" -Dir | ? Name -Match "^(.+)Portable$" | % {"""$($Matches.1)"""}) -join ","

iex "function global:portableapp([ValidateSet($Apps)]`$App) {
    if (!`$App) {return & ""D:\AP\Start.exe""}
    & ""D:\AP\PortableApps\`${App}Portable\`${App}Portable.exe"" @args
}"
Write-AP "+Use portableapp <app> to launch portable apps!"
