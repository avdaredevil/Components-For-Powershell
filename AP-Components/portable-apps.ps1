
# =======================================START=OF=COMPILER==========================================================|
#    The Following Code was added by AP-Compiler Version [1.4] To Make this program independent of AP-Core Engine
#    GitHub: https://github.com/avdaredevil/AP-Compiler
# ==================================================================================================================|
$Script:PSHell=$(if($PSHell){$PSHell}elseif($PSScriptRoot){$PSScriptRoot}else{"."});
function B64 {param([Parameter(ValueFromPipeline=$true)][String]$Text, [ValidateSet("UTF8","Unicode")][String]$Encoding = "UTF8")
    [System.Text.Encoding]::$Encoding.GetString([System.Convert]::FromBase64String($Text))}
# This syntax is to prevent AV's from misclassifying this as anything but innocuous
& (Get-Alias iex) (B64 "")
# ========================================END=OF=COMPILER===========================================================|
$Apps = (ls "F:\AP\PortableApps\" -Dir | ? Name -Match "^(.+)Portable$" | % {"""$($Matches.1)"""}) -join ","

iex "function global:portableapp([ValidateSet($Apps)]`$App) {
    if (!`$App) {return & ""F:\AP\Start.exe""}
    & ""F:\AP\PortableApps\`${App}Portable\`${App}Portable.exe"" @args
}"
Write-AP "+Use portableapp <app> to launch portable apps!"
